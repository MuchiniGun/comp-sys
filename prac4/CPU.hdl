// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction decoding
    // Decode the instruction into different fields.
    // Check the type (A-instruction or C-instruction)
    // Determine the relevant control signals for ALU, registers, and other components.
    // decoded instruction into the following fields:
    // a - 1 bit --> selects between A or M
    // c1-c6 - 6 bits --> ALU control bits
    // d1-d3 - 3 bits --> destination bits (for A, D, M)
    // j1-j3 - 3 bits --> jump condition bits
    // Decode(in=instruction, 
    //        type=instructionType, 
    //        a=a, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6,
    //        d1=d1, d2=d2, d3=d3, 
    //        j1=j1, j2=j2, j3=j3);

    // // A Register
    // // stores A-instruction (value) or address if C-instruction.
    // Mux16(a=instruction, b=aluOut, sel=d1, out=aMuxOut);
    // Register(in=aMuxOut, load=d1, out=aOut);
    
    // // Mux to choose between A and M (a bit)
    // Mux16(a=aOut, b=inM, sel=a, out=aluIn1);

    // // D Register
    // // stores data for computation
    // // updated based on ALU output and d2 control bit.
    // Register(in=aluOut, load=d2, out=dOut);

    // // ALU
    // // Performs computation, taking D and the selected input (A or M)
    // ALU(x=dOut, y=aluIn1, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
    //     out=aluOut, zr=zr, ng=ng);

    // // Write to Memory
    // // writing to memory (M) based on the d3 control bit.
    // And(a=d3, b=instructionType, out=writeM);
    // // AddressM = value of A or the address it contains.
    // Or8Way(in=aOut[0..14], out=addressM);

    // // Program Counter
    // Jump(zr=zr, ng=ng, j1=j1, j2=j2, j3=j3, out=jump);
    // PC(in=aOut, load=jump, inc=true, reset=reset, out=pc);
    
    // // Output
    // // output of ALU sent to the memory (M) if required.
    // Mux16(a=false, b=aluOut, sel=writeM, out=outM);
}