// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // spliting the load into 4 different signals lX based on msb of address input
    // this determins which memory component to write to after load starts
    DMux4Way(in=load, sel=address[13..14], a=l0, b=l1, c=l2, d=l3);

    // handles first 16K words of memory 
    // in value is written to this RAM when l0 & l1 is high
    // 14-bit address (address[0..13]) is the location
    // reps 16k blocks of memory access when address[13..14] is 00
    RAM16K(in=in, load=l0, address=address[0..13], out=ram0);
    // reps 16k blocks of memory access when address[13..14] is 01
    RAM16K(in=in, load=l1, address=address[0..13], out=ram1);

    // in value is written to the screen memory if l2 is high
    // handles memory access for screen, accessed when address[13..14] is 10.
    Screen(in=in, load=l2, address=address[0..12], out=screen);

    // reads value of keyboard's memory map. 
    // keyboard memory map is read-only, so no input
    // accessed when address[13..14] is 11
    Keyboard(out=kbd);

    // selects which of the 4 outputs (ram0, ram1, screen, or kbd)
    // should be passed to the out output, based on the value of address[13..14].
    // basically completes the read operation 
    Mux4Way16(a=ram0, b=ram1, c=screen, d=kbd, sel=address[13..14], out=out);
    
}