// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    // Put your code here:
    // check type of instruction (A or C)
    // The in[15] of instruction: 0 for A-instruction, 1 for C-instruction
    // in[15] is the 15th bit of the instruction (MSB)
    Or(a=in[15], b=false, out=type); 
    // notIn15 = negation of in[15]
    Not(in=in[15], out=notIn15); 
    
    // If C-instruction
     // a = bit 12 of instruction
    And(a=in[15], b=in[12], out=a); 

    // Op-code wires to ALU
    // cX is the Xth bit of the instruction
    And(a=in[15], b=in[11], out=c1);
    And(a=in[15], b=in[10], out=c2);
    And(a=in[15], b=in[9],  out=c3);
    And(a=in[15], b=in[8],  out=c4);
    And(a=in[15], b=in[7],  out=c5);
    And(a=in[15], b=in[6],  out=c6);

    // Destination wires
    // dX is the Xth bit of the instruction
    And(a=in[15], b=in[5],  out=dC);
    Mux(a= true, b =dC, sel = in[15], out = d1);
    And(a=in[15], b=in[4],  out=d2);
    And(a=in[15], b=in[3],  out=d3);

    // Jump wires
    // jX is the Xth bit of the instruction
    And(a=in[15], b=in[2],  out=j1);
    And(a=in[15], b=in[1],  out=j2);
    And(a=in[15], b=in[0],  out=j3);

}